{"ast":null,"code":"var _jsxFileName = \"/Users/davinci/TaskManagementFE/src/components/Column/Column.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport { useTranslation } from \"react-i18next\";\nimport Card from \"components/Card/Card\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { Dropdown } from \"react-bootstrap\";\nimport ConfirmModal from \"components/Common/ConfirmModal\";\nimport \"./Column.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Column = props => {\n  _s();\n\n  const {\n    column,\n    onCardDrop\n  } = props;\n  const cards = mapOrder(column.cards, column.cardOrder, \"id\");\n  const {\n    t\n  } = useTranslation();\n  const [isShowConfirmPopup, setIsShowConfirmPopup] = useState(false); // const onCardDrop = (card) => {\n  //   console.log(card);\n  // };\n\n  const handleShowConfirmation = () => setIsShowConfirmPopup(!isShowConfirmPopup);\n\n  const handleActionConfirmPopup = type => {\n    console.log(type);\n\n    if (type === \"confirm\") {}\n\n    if (type === \"close\") {}\n\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"column-drag-handle\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-title\",\n          children: column.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-dropdown-actions\",\n          children: /*#__PURE__*/_jsxDEV(Dropdown, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n              id: \"dropdown-basic\",\n              size: \"sm\",\n              className: \"dropdown-btn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n              children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                onClick: handleShowConfirmation,\n                children: t(\"text.removeCard\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                children: t(\"text.moveAll\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                children: t(\"text.more\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-list\",\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          groupName: \"col\" // onDragStart={(e) => console.log(\"drag started\", e)}\n          // onDragEnd={(e) => console.log(\"drag end\", e)}\n          ,\n          onDrop: dropResult => onCardDrop(column.id, dropResult),\n          getChildPayload: index => cards[index],\n          dragClass: \"card-ghost\",\n          dropClass: \"card-ghost-drop\" // onDragEnter={() => {\n          //   console.log(\"drag enter:\", column.id);\n          // }}\n          // onDragLeave={() => {\n          //   console.log(\"drag leave:\", column.id);\n          // }}\n          // onDropReady={(p) => console.log(\"Drop ready: \", p)}\n          ,\n          dropPlaceholder: {\n            animationDuration: 300,\n            showOnTop: true,\n            className: \"column-drop-preview\"\n          },\n          dropPlaceholderAnimationDuration: 200,\n          children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              card: card\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-plus icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), t(\"text.addAnotherCard\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), isShowConfirmPopup && /*#__PURE__*/_jsxDEV(ConfirmModal, {\n        show: isShowConfirmPopup,\n        onAction: handleActionConfirmPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Column, \"fxplv7aLG86zO8AojTrwoMGXnlk=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Column;\nexport default _c2 = /*#__PURE__*/React.memo(Column);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Column\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/davinci/TaskManagementFE/src/components/Column/Column.jsx"],"names":["React","useState","Container","Draggable","useTranslation","Card","mapOrder","Dropdown","ConfirmModal","Column","props","column","onCardDrop","cards","cardOrder","t","isShowConfirmPopup","setIsShowConfirmPopup","handleShowConfirmation","handleActionConfirmPopup","type","console","log","title","dropResult","id","index","animationDuration","showOnTop","className","map","card","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,kBAArC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,OAAO,eAAP;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBF,KAA/B;AACA,QAAMG,KAAK,GAAGP,QAAQ,CAACK,MAAM,CAACE,KAAR,EAAeF,MAAM,CAACG,SAAtB,EAAiC,IAAjC,CAAtB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQX,cAAc,EAA5B;AACA,QAAM,CAACY,kBAAD,EAAqBC,qBAArB,IAA8ChB,QAAQ,CAAC,KAAD,CAA5D,CAJwB,CAMxB;AACA;AACA;;AAEA,QAAMiB,sBAAsB,GAAG,MAC7BD,qBAAqB,CAAC,CAACD,kBAAF,CADvB;;AAGA,QAAMG,wBAAwB,GAAIC,IAAD,IAAU;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,QAAIA,IAAI,KAAK,SAAb,EAAwB,CACvB;;AACD,QAAIA,IAAI,KAAK,OAAb,EAAsB,CACrB;;AACDH,IAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACD,GAPD;;AASA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,oBAAlB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,oBAA+BL,MAAM,CAACY;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA,iCACE,QAAC,QAAD;AAAA,oCACE,QAAC,QAAD,CAAU,MAAV;AACE,cAAA,EAAE,EAAC,gBADL;AAEE,cAAA,IAAI,EAAC,IAFP;AAGE,cAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE,QAAC,QAAD,CAAU,IAAV;AAAA,sCACE,QAAC,QAAD,CAAU,IAAV;AAAe,gBAAA,OAAO,EAAEL,sBAAxB;AAAA,0BACGH,CAAC,CAAC,iBAAD;AADJ;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,QAAD,CAAU,IAAV;AAAA,0BAAgBA,CAAC,CAAC,cAAD;AAAjB;AAAA;AAAA;AAAA;AAAA,sBAJF,eAKE,QAAC,QAAD,CAAU,IAAV;AAAA,0BAAgBA,CAAC,CAAC,WAAD;AAAjB;AAAA;AAAA;AAAA;AAAA,sBALF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAqBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACE,QAAC,SAAD;AACE,UAAA,SAAS,EAAC,KADZ,CAEE;AACA;AAHF;AAIE,UAAA,MAAM,EAAGS,UAAD,IAAgBZ,UAAU,CAACD,MAAM,CAACc,EAAR,EAAYD,UAAZ,CAJpC;AAKE,UAAA,eAAe,EAAGE,KAAD,IAAWb,KAAK,CAACa,KAAD,CALnC;AAME,UAAA,SAAS,EAAC,YANZ;AAOE,UAAA,SAAS,EAAC,iBAPZ,CAQE;AACA;AACA;AACA;AACA;AACA;AACA;AAdF;AAeE,UAAA,eAAe,EAAE;AACfC,YAAAA,iBAAiB,EAAE,GADJ;AAEfC,YAAAA,SAAS,EAAE,IAFI;AAGfC,YAAAA,SAAS,EAAE;AAHI,WAfnB;AAoBE,UAAA,gCAAgC,EAAE,GApBpC;AAAA,oBAsBGhB,KAAK,CAACiB,GAAN,CAAU,CAACC,IAAD,EAAOL,KAAP,kBACT,QAAC,SAAD;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAEK;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF,aAAgBL,KAAhB;AAAA;AAAA;AAAA;AAAA,kBADD;AAtBH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cArBF,eAmDE;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGX,CAAC,CAAC,qBAAD,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAnDF,EAyDGC,kBAAkB,iBACjB,QAAC,YAAD;AACE,QAAA,IAAI,EAAEA,kBADR;AAEE,QAAA,QAAQ,EAAEG;AAFZ;AAAA;AAAA;AAAA;AAAA,cA1DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoED,CA1FD;;GAAMV,M;UAGUL,c;;;KAHVK,M;AA4FN,kCAAeT,KAAK,CAACgC,IAAN,CAAWvB,MAAX,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport { useTranslation } from \"react-i18next\";\nimport Card from \"components/Card/Card\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { Dropdown } from \"react-bootstrap\";\nimport ConfirmModal from \"components/Common/ConfirmModal\";\n\nimport \"./Column.scss\";\n\nconst Column = (props) => {\n  const { column, onCardDrop } = props;\n  const cards = mapOrder(column.cards, column.cardOrder, \"id\");\n  const { t } = useTranslation();\n  const [isShowConfirmPopup, setIsShowConfirmPopup] = useState(false);\n\n  // const onCardDrop = (card) => {\n  //   console.log(card);\n  // };\n\n  const handleShowConfirmation = () =>\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n\n  const handleActionConfirmPopup = (type) => {\n    console.log(type);\n    if (type === \"confirm\") {\n    }\n    if (type === \"close\") {\n    }\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n  };\n\n  return (\n    <>\n      <div className=\"columns\">\n        <header className=\"column-drag-handle\">\n          <div className=\"column-title\">{column.title}</div>\n          <div className=\"column-dropdown-actions\">\n            <Dropdown>\n              <Dropdown.Toggle\n                id=\"dropdown-basic\"\n                size=\"sm\"\n                className=\"dropdown-btn\"\n              />\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={handleShowConfirmation}>\n                  {t(\"text.removeCard\")}\n                </Dropdown.Item>\n                <Dropdown.Item>{t(\"text.moveAll\")}</Dropdown.Item>\n                <Dropdown.Item>{t(\"text.more\")}</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        </header>\n        <div className=\"card-list\">\n          <Container\n            groupName=\"col\"\n            // onDragStart={(e) => console.log(\"drag started\", e)}\n            // onDragEnd={(e) => console.log(\"drag end\", e)}\n            onDrop={(dropResult) => onCardDrop(column.id, dropResult)}\n            getChildPayload={(index) => cards[index]}\n            dragClass=\"card-ghost\"\n            dropClass=\"card-ghost-drop\"\n            // onDragEnter={() => {\n            //   console.log(\"drag enter:\", column.id);\n            // }}\n            // onDragLeave={() => {\n            //   console.log(\"drag leave:\", column.id);\n            // }}\n            // onDropReady={(p) => console.log(\"Drop ready: \", p)}\n            dropPlaceholder={{\n              animationDuration: 300,\n              showOnTop: true,\n              className: \"column-drop-preview\",\n            }}\n            dropPlaceholderAnimationDuration={200}\n          >\n            {cards.map((card, index) => (\n              <Draggable key={index}>\n                <Card card={card} />\n              </Draggable>\n            ))}\n          </Container>\n        </div>\n        <footer>\n          <div className=\"footer-actions\">\n            <i className=\"fa fa-plus icon\"></i>\n            {t(\"text.addAnotherCard\")}\n          </div>\n        </footer>\n        {isShowConfirmPopup && (\n          <ConfirmModal\n            show={isShowConfirmPopup}\n            onAction={handleActionConfirmPopup}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(Column);\n"]},"metadata":{},"sourceType":"module"}