{"ast":null,"code":"import _objectSpread from\"/Users/davinci/TaskManagementFE/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/davinci/TaskManagementFE/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from\"react\";import{Container,Draggable}from\"react-smooth-dnd\";import{useTranslation}from\"react-i18next\";import Card from\"components/Card/Card\";import{cloneDeep}from\"lodash\";import{mapOrder}from\"ultilities/ultis\";import{Dropdown,Form,Button}from\"react-bootstrap\";import ConfirmModal from\"components/Common/ConfirmModal\";import{MODAL_ACTION_CONFIRM}from\"ultilities/constants\";import{saveContent,selectAllInlineText}from\"ultilities/contentEditable\";import\"./Column.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Column=function Column(props){var column=props.column,onCardDrop=props.onCardDrop,onUpdateColumn=props.onUpdateColumn;var cards=mapOrder(column.cards,column.cardOrder,\"id\");var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isShowConfirmPopup=_useState2[0],setIsShowConfirmPopup=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),columnTitle=_useState4[0],setColumnTitle=_useState4[1];var newCardTextareaRef=useRef(null);var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),newCardTitle=_useState6[0],setNewCardTitle=_useState6[1];// const onCardDrop = (card) => {\n//   console.log(card);\n// };\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isCreateInputOpen=_useState8[0],setIsCreateInputOpen=_useState8[1];var handleToggleInput=function handleToggleInput(){setIsCreateInputOpen(!isCreateInputOpen);};var handleOnCreate=function handleOnCreate(){if(!newCardTitle){newCardTextareaRef.current.focus();return;}var newCardToAdd={id:Math.random().toString(36).substr(2,5),boardId:column.boardId,columnId:column.id,title:newCardTitle.trim(),cover:null};var newColumns=cloneDeep(column);newColumns.cards.push(newCardToAdd);newColumns.cardOrder.push(newCardToAdd.id);onUpdateColumn(newColumns);setNewCardTitle(\"\");setIsCreateInputOpen(false);};var handleShowConfirmation=function handleShowConfirmation(){return setIsShowConfirmPopup(!isShowConfirmPopup);};var handleActionConfirmPopup=function handleActionConfirmPopup(type){console.log(type);if(type===MODAL_ACTION_CONFIRM){/**\n       * *something stuff here\n       */var newColumn=_objectSpread(_objectSpread({},column),{},{_destroy:true});onUpdateColumn(newColumn);}setIsShowConfirmPopup(!isShowConfirmPopup);};var handleColumnTitleChange=function handleColumnTitleChange(e){setColumnTitle(e.target.value);};var handleColumnTitleBlur=function handleColumnTitleBlur(e){var newColumn=_objectSpread(_objectSpread({},column),{},{title:columnTitle});onUpdateColumn(newColumn);};var onChangeInput=function onChangeInput(e){setNewCardTitle(e.target.value);};useEffect(function(){setColumnTitle(column.title);},[column.title]);useEffect(function(){if(newCardTextareaRef&&newCardTextareaRef.current){newCardTextareaRef.current.focus();newCardTextareaRef.current.select();}},[isCreateInputOpen]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"columns\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"column-drag-handle\",children:[/*#__PURE__*/_jsx(Form.Control,{size:\"sm\",type:\"text\",placeholder:\"Enter column title...\",className:\"trello-content-editable\",value:columnTitle,onBlur:handleColumnTitleBlur,spellCheck:\"false\",onClick:selectAllInlineText,onChange:handleColumnTitleChange,onKeyDown:saveContent,onMouseDown:function onMouseDown(e){return e.preventDefault();}}),/*#__PURE__*/_jsx(\"div\",{className:\"column-dropdown-actions\",children:/*#__PURE__*/_jsxs(Dropdown,{children:[/*#__PURE__*/_jsx(Dropdown.Toggle,{id:\"dropdown-basic\",size:\"sm\",className:\"dropdown-btn\"}),/*#__PURE__*/_jsxs(Dropdown.Menu,{children:[/*#__PURE__*/_jsx(Dropdown.Item,{onClick:handleShowConfirmation,children:t(\"text.removeCard\")}),/*#__PURE__*/_jsx(Dropdown.Item,{children:t(\"text.moveAll\")}),/*#__PURE__*/_jsx(Dropdown.Item,{children:t(\"text.more\")})]})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-list\",children:[/*#__PURE__*/_jsx(Container,{groupName:\"col\"// onDragStart={(e) => console.log(\"drag started\", e)}\n// onDragEnd={(e) => console.log(\"drag end\", e)}\n,onDrop:function onDrop(dropResult){return onCardDrop(column.id,dropResult);},getChildPayload:function getChildPayload(index){return cards[index];},dragClass:\"card-ghost\",dropClass:\"card-ghost-drop\"// onDragEnter={() => {\n//   console.log(\"drag enter:\", column.id);\n// }}\n// onDragLeave={() => {\n//   console.log(\"drag leave:\", column.id);\n// }}\n// onDropReady={(p) => console.log(\"Drop ready: \", p)}\n,dropPlaceholder:{animationDuration:300,showOnTop:true,className:\"column-drop-preview\"},dropPlaceholderAnimationDuration:200,children:cards.map(function(card,index){return/*#__PURE__*/_jsx(Draggable,{children:/*#__PURE__*/_jsx(Card,{card:card})},index);})}),isCreateInputOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"add-new-card\",children:[/*#__PURE__*/_jsx(Form.Control,{size:\"sm\",as:\"textarea\",rows:\"3 \",placeholder:t(\"text.enterNewCardTitle\"),className:\"textarea-enter-new-card\",ref:newCardTextareaRef,value:newCardTitle,onChange:onChangeInput,onKeyDown:function onKeyDown(e){return e.key===\"Enter\"&&handleOnCreate();}}),/*#__PURE__*/_jsx(Button,{variant:\"success\",size:\"sm\",onClick:handleOnCreate,children:t(\"text.addNewCard\")}),/*#__PURE__*/_jsx(\"span\",{className:\"cancel-add-new\",onClick:handleToggleInput,children:/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-close icon\"})})]})]}),/*#__PURE__*/_jsx(\"footer\",{children:!isCreateInputOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"footer-actions\",onClick:handleToggleInput,children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-plus icon\"}),t(\"text.addAnotherCard\")]})}),isShowConfirmPopup&&/*#__PURE__*/_jsx(ConfirmModal,{show:isShowConfirmPopup,onAction:handleActionConfirmPopup})]})});};export default/*#__PURE__*/React.memo(Column);","map":{"version":3,"sources":["/Users/davinci/TaskManagementFE/src/components/Column/Column.jsx"],"names":["React","useState","useEffect","useRef","Container","Draggable","useTranslation","Card","cloneDeep","mapOrder","Dropdown","Form","Button","ConfirmModal","MODAL_ACTION_CONFIRM","saveContent","selectAllInlineText","Column","props","column","onCardDrop","onUpdateColumn","cards","cardOrder","t","isShowConfirmPopup","setIsShowConfirmPopup","columnTitle","setColumnTitle","newCardTextareaRef","newCardTitle","setNewCardTitle","isCreateInputOpen","setIsCreateInputOpen","handleToggleInput","handleOnCreate","current","focus","newCardToAdd","id","Math","random","toString","substr","boardId","columnId","title","trim","cover","newColumns","push","handleShowConfirmation","handleActionConfirmPopup","type","console","log","newColumn","_destroy","handleColumnTitleChange","e","target","value","handleColumnTitleBlur","onChangeInput","select","preventDefault","dropResult","index","animationDuration","showOnTop","className","map","card","key","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport { useTranslation } from \"react-i18next\";\nimport Card from \"components/Card/Card\";\nimport { cloneDeep } from \"lodash\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport ConfirmModal from \"components/Common/ConfirmModal\";\nimport { MODAL_ACTION_CONFIRM } from \"ultilities/constants\";\nimport { saveContent, selectAllInlineText } from \"ultilities/contentEditable\";\n\nimport \"./Column.scss\";\n\nconst Column = (props) => {\n  const { column, onCardDrop, onUpdateColumn } = props;\n  const cards = mapOrder(column.cards, column.cardOrder, \"id\");\n  const { t } = useTranslation();\n  const [isShowConfirmPopup, setIsShowConfirmPopup] = useState(false);\n  const [columnTitle, setColumnTitle] = useState(\"\");\n  const newCardTextareaRef = useRef(null);\n  const [newCardTitle, setNewCardTitle] = useState(\"\");\n\n  // const onCardDrop = (card) => {\n  //   console.log(card);\n  // };\n\n  const [isCreateInputOpen, setIsCreateInputOpen] = useState(false);\n  const handleToggleInput = () => {\n    setIsCreateInputOpen(!isCreateInputOpen);\n  };\n\n  const handleOnCreate = () => {\n    if (!newCardTitle) {\n      newCardTextareaRef.current.focus();\n      return;\n    }\n\n    const newCardToAdd = {\n      id: Math.random().toString(36).substr(2, 5),\n      boardId: column.boardId,\n      columnId: column.id,\n      title: newCardTitle.trim(),\n      cover: null,\n    };\n\n    let newColumns = cloneDeep(column);\n\n    newColumns.cards.push(newCardToAdd);\n    newColumns.cardOrder.push(newCardToAdd.id);\n\n    onUpdateColumn(newColumns);\n    setNewCardTitle(\"\");\n    setIsCreateInputOpen(false);\n  };\n\n  const handleShowConfirmation = () =>\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n\n  const handleActionConfirmPopup = (type) => {\n    console.log(type);\n    if (type === MODAL_ACTION_CONFIRM) {\n      /**\n       * *something stuff here\n       */\n      const newColumn = {\n        ...column,\n        _destroy: true,\n      };\n      onUpdateColumn(newColumn);\n    }\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n  };\n\n  const handleColumnTitleChange = (e) => {\n    setColumnTitle(e.target.value);\n  };\n\n  const handleColumnTitleBlur = (e) => {\n    const newColumn = {\n      ...column,\n      title: columnTitle,\n    };\n    onUpdateColumn(newColumn);\n  };\n\n  const onChangeInput = (e) => {\n    setNewCardTitle(e.target.value);\n  };\n\n  useEffect(() => {\n    setColumnTitle(column.title);\n  }, [column.title]);\n\n  useEffect(() => {\n    if (newCardTextareaRef && newCardTextareaRef.current) {\n      newCardTextareaRef.current.focus();\n      newCardTextareaRef.current.select();\n    }\n  }, [isCreateInputOpen]);\n\n  return (\n    <>\n      <div className=\"columns\">\n        <header className=\"column-drag-handle\">\n          <Form.Control\n            size=\"sm\"\n            type=\"text\"\n            placeholder=\"Enter column title...\"\n            className=\"trello-content-editable\"\n            value={columnTitle}\n            onBlur={handleColumnTitleBlur}\n            spellCheck=\"false\"\n            onClick={selectAllInlineText}\n            onChange={handleColumnTitleChange}\n            onKeyDown={saveContent}\n            onMouseDown={(e) => e.preventDefault()}\n          />\n          <div className=\"column-dropdown-actions\">\n            <Dropdown>\n              <Dropdown.Toggle\n                id=\"dropdown-basic\"\n                size=\"sm\"\n                className=\"dropdown-btn\"\n              />\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={handleShowConfirmation}>\n                  {t(\"text.removeCard\")}\n                </Dropdown.Item>\n                <Dropdown.Item>{t(\"text.moveAll\")}</Dropdown.Item>\n                <Dropdown.Item>{t(\"text.more\")}</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        </header>\n        <div className=\"card-list\">\n          <Container\n            groupName=\"col\"\n            // onDragStart={(e) => console.log(\"drag started\", e)}\n            // onDragEnd={(e) => console.log(\"drag end\", e)}\n            onDrop={(dropResult) => onCardDrop(column.id, dropResult)}\n            getChildPayload={(index) => cards[index]}\n            dragClass=\"card-ghost\"\n            dropClass=\"card-ghost-drop\"\n            // onDragEnter={() => {\n            //   console.log(\"drag enter:\", column.id);\n            // }}\n            // onDragLeave={() => {\n            //   console.log(\"drag leave:\", column.id);\n            // }}\n            // onDropReady={(p) => console.log(\"Drop ready: \", p)}\n            dropPlaceholder={{\n              animationDuration: 300,\n              showOnTop: true,\n              className: \"column-drop-preview\",\n            }}\n            dropPlaceholderAnimationDuration={200}\n          >\n            {cards.map((card, index) => (\n              <Draggable key={index}>\n                <Card card={card} />\n              </Draggable>\n            ))}\n          </Container>\n          {isCreateInputOpen && (\n            <div className=\"add-new-card\">\n              <Form.Control\n                size=\"sm\"\n                as=\"textarea\"\n                rows=\"3 \"\n                placeholder={t(\"text.enterNewCardTitle\")}\n                className=\"textarea-enter-new-card\"\n                ref={newCardTextareaRef}\n                value={newCardTitle}\n                onChange={onChangeInput}\n                onKeyDown={(e) => e.key === \"Enter\" && handleOnCreate()}\n              />\n              <Button variant=\"success\" size=\"sm\" onClick={handleOnCreate}>\n                {t(\"text.addNewCard\")}\n              </Button>\n              <span className=\"cancel-add-new\" onClick={handleToggleInput}>\n                <i className=\"fa fa-close icon\"></i>\n              </span>\n            </div>\n          )}\n        </div>\n        <footer>\n          {!isCreateInputOpen && (\n            <div className=\"footer-actions\" onClick={handleToggleInput}>\n              <i className=\"fa fa-plus icon\"></i>\n              {t(\"text.addAnotherCard\")}\n            </div>\n          )}\n        </footer>\n        {isShowConfirmPopup && (\n          <ConfirmModal\n            show={isShowConfirmPopup}\n            onAction={handleActionConfirmPopup}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(Column);\n"]},"metadata":{},"sourceType":"module"}