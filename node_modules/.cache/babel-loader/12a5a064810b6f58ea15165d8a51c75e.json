{"ast":null,"code":"var _jsxFileName = \"/Users/davinci/TaskManagementFE/src/components/BoardContent/BoardContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Column from \"components/Column/Column\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport { Container as BootstrapContainer, Row, Col, Form, Button } from \"react-bootstrap\";\nimport \"./BoardContent.scss\";\nimport { isEmpty } from \"lodash\";\nimport { initialData } from \"actions/initialData\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { applyDrag } from \"../../ultilities/dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BoardContent = () => {\n  _s();\n\n  const [board, setBoard] = useState({});\n  const [column, setColumn] = useState([]);\n  const [isCreateInputOpen, setIsCreateInputOpen] = useState(false);\n  const [newColumnTitle, setNewColumnTitle] = useState(\"\");\n  const newColumnInputRef = useRef(null);\n  useEffect(() => {\n    const getBoardFromDB = initialData.boards.find(board => board.id === \"board-1\");\n\n    if (getBoardFromDB) {\n      setBoard(getBoardFromDB);\n      setColumn(mapOrder(getBoardFromDB.columns, getBoardFromDB.columnOrder, \"id\"));\n    }\n  }, []);\n  useEffect(() => {\n    if (newColumnInputRef && newColumnInputRef.current) {\n      newColumnInputRef.current.focus();\n    }\n  }, [isCreateInputOpen]);\n\n  if (isEmpty(board)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"not-found\",\n      children: \"Board not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  const onColumnDrop = dropResult => {\n    console.log(dropResult);\n    let newColumn = [...column];\n    newColumn = applyDrag(newColumn, dropResult);\n    setColumn(newColumn);\n    console.log(column);\n    console.log(newColumn);\n    let newBoard = { ...board\n    };\n    newBoard.columnOrder = newColumn.map(c => c.id);\n    newBoard.columns = newColumn;\n    setBoard(newBoard);\n  };\n\n  const onCardDrop = (columnId, dropResult) => {\n    //log history when change column\n    if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n      let newColumn = [...column];\n      let curColumn = newColumn.find(c => c.id === columnId);\n      curColumn.cards = applyDrag(curColumn.cards, dropResult);\n      curColumn.cardOrder = curColumn.cards.map(i => i.id);\n      setColumn(newColumn);\n    }\n  };\n\n  const handleToggleInput = () => {\n    setIsCreateInputOpen(!isCreateInputOpen);\n  };\n\n  const handleOnCreate = () => {\n    if (!newColumnTitle) {\n      newColumnInputRef.current.focus();\n      return;\n    }\n\n    const newColumnToAdd = {\n      id: Math.random().toString(36).substr(2, 5),\n      boardId: board.id,\n      title: newColumnTitle.trim(),\n      cardOrder: [],\n      cards: []\n    };\n    alert(newColumnTitle);\n  };\n\n  const onChangeInput = e => {\n    setNewColumnTitle(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"workspace\",\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        orientation: \"horizontal\",\n        onDrop: onColumnDrop,\n        dragHandleSelector: \".column-drag-handle\",\n        dropPlaceholder: {\n          animationDuration: 150,\n          showOnTop: true,\n          className: \"cards-drop-preview\"\n        },\n        getChildPayload: index => column[index],\n        children: column.map((column, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n          children: /*#__PURE__*/_jsxDEV(Column, {\n            column: column,\n            onCardDrop: onCardDrop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BootstrapContainer, {\n        className: \"trello-container\",\n        children: !isCreateInputOpen ? /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            className: \"add-new-column\",\n            onClick: handleToggleInput,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-plus icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), \"Add another column\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            className: \"enter-new-column\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              size: \"sm\",\n              type: \"text\",\n              placeholder: \"Enter column title...\",\n              className: \"input-enter-new-column\",\n              ref: newColumnInputRef,\n              value: newColumnTitle,\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              size: \"sm\",\n              onClick: handleOnCreate,\n              children: \"Add column\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"cancel-add-new-column\",\n              onClick: handleToggleInput,\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-close icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BoardContent, \"eXrYeLRaRJyzHn5/mTb+oUruoBY=\");\n\n_c = BoardContent;\nexport default _c2 = /*#__PURE__*/React.memo(BoardContent);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BoardContent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/davinci/TaskManagementFE/src/components/BoardContent/BoardContent.jsx"],"names":["React","useState","useEffect","useRef","Column","Container","Draggable","BootstrapContainer","Row","Col","Form","Button","isEmpty","initialData","mapOrder","applyDrag","BoardContent","board","setBoard","column","setColumn","isCreateInputOpen","setIsCreateInputOpen","newColumnTitle","setNewColumnTitle","newColumnInputRef","getBoardFromDB","boards","find","id","columns","columnOrder","current","focus","onColumnDrop","dropResult","console","log","newColumn","newBoard","map","c","onCardDrop","columnId","removedIndex","addedIndex","curColumn","cards","cardOrder","i","handleToggleInput","handleOnCreate","newColumnToAdd","Math","random","toString","substr","boardId","title","trim","alert","onChangeInput","e","target","value","animationDuration","showOnTop","className","index","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Column from \"components/Column/Column\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport {\n  Container as BootstrapContainer,\n  Row,\n  Col,\n  Form,\n  Button,\n} from \"react-bootstrap\";\nimport \"./BoardContent.scss\";\nimport { isEmpty } from \"lodash\";\nimport { initialData } from \"actions/initialData\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { applyDrag } from \"../../ultilities/dnd\";\n\nconst BoardContent = () => {\n  const [board, setBoard] = useState({});\n  const [column, setColumn] = useState([]);\n  const [isCreateInputOpen, setIsCreateInputOpen] = useState(false);\n  const [newColumnTitle, setNewColumnTitle] = useState(\"\");\n  const newColumnInputRef = useRef(null);\n\n  useEffect(() => {\n    const getBoardFromDB = initialData.boards.find(\n      (board) => board.id === \"board-1\"\n    );\n    if (getBoardFromDB) {\n      setBoard(getBoardFromDB);\n\n      setColumn(\n        mapOrder(getBoardFromDB.columns, getBoardFromDB.columnOrder, \"id\")\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (newColumnInputRef && newColumnInputRef.current) {\n      newColumnInputRef.current.focus();\n    }\n  }, [isCreateInputOpen]);\n\n  if (isEmpty(board)) {\n    return <div className=\"not-found\">Board not found</div>;\n  }\n\n  const onColumnDrop = (dropResult) => {\n    console.log(dropResult);\n    let newColumn = [...column];\n    newColumn = applyDrag(newColumn, dropResult);\n    setColumn(newColumn);\n    console.log(column);\n    console.log(newColumn);\n\n    let newBoard = { ...board };\n    newBoard.columnOrder = newColumn.map((c) => c.id);\n    newBoard.columns = newColumn;\n    setBoard(newBoard);\n  };\n\n  const onCardDrop = (columnId, dropResult) => {\n    //log history when change column\n    if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n      let newColumn = [...column];\n\n      let curColumn = newColumn.find((c) => c.id === columnId);\n\n      curColumn.cards = applyDrag(curColumn.cards, dropResult);\n      curColumn.cardOrder = curColumn.cards.map((i) => i.id);\n\n      setColumn(newColumn);\n    }\n  };\n\n  const handleToggleInput = () => {\n    setIsCreateInputOpen(!isCreateInputOpen);\n  };\n\n  const handleOnCreate = () => {\n    if (!newColumnTitle) {\n      newColumnInputRef.current.focus();\n      return;\n    }\n\n    const newColumnToAdd = {\n      id: Math.random().toString(36).substr(2, 5),\n      boardId: board.id,\n      title: newColumnTitle.trim(),\n      cardOrder: [],\n      cards: [],\n    };\n    alert(newColumnTitle);\n  };\n\n  const onChangeInput = (e) => {\n    setNewColumnTitle(e.target.value);\n  };\n\n  return (\n    <>\n      <nav className=\"workspace\">\n        <Container\n          orientation=\"horizontal\"\n          onDrop={onColumnDrop}\n          dragHandleSelector=\".column-drag-handle\"\n          dropPlaceholder={{\n            animationDuration: 150,\n            showOnTop: true,\n            className: \"cards-drop-preview\",\n          }}\n          getChildPayload={(index) => column[index]}\n        >\n          {column.map((column, index) => (\n            <Draggable key={index}>\n              <Column column={column} onCardDrop={onCardDrop} />\n            </Draggable>\n          ))}\n        </Container>\n        <BootstrapContainer className=\"trello-container\">\n          {!isCreateInputOpen ? (\n            <Row>\n              <Col className=\"add-new-column\" onClick={handleToggleInput}>\n                <i className=\"fa fa-plus icon\"></i>Add another column\n              </Col>\n            </Row>\n          ) : (\n            <Row>\n              <Col className=\"enter-new-column\">\n                <Form.Control\n                  size=\"sm\"\n                  type=\"text\"\n                  placeholder=\"Enter column title...\"\n                  className=\"input-enter-new-column\"\n                  ref={newColumnInputRef}\n                  value={newColumnTitle}\n                  onChange={onChangeInput}\n                />\n                <Button variant=\"success\" size=\"sm\" onClick={handleOnCreate}>\n                  Add column\n                </Button>\n                <span\n                  className=\"cancel-add-new-column\"\n                  onClick={handleToggleInput}\n                >\n                  <i className=\"fa fa-close icon\"></i>\n                </span>\n              </Col>\n            </Row>\n          )}\n        </BootstrapContainer>\n      </nav>\n    </>\n  );\n};\n\nexport default React.memo(BoardContent);\n"]},"metadata":{},"sourceType":"module"}