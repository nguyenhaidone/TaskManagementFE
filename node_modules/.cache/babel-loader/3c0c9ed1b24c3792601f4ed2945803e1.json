{"ast":null,"code":"var _jsxFileName = \"/Users/davinci/TaskManagementFE/src/components/Column/Column.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport { useTranslation } from \"react-i18next\";\nimport Card from \"components/Card/Card\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport ConfirmModal from \"components/Common/ConfirmModal\";\nimport { MODAL_ACTION_CONFIRM } from \"ultilities/constants\";\nimport { saveContent, selectAllInlineText } from \"ultilities/contentEditable\";\nimport \"./Column.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Column = props => {\n  _s();\n\n  const {\n    column,\n    onCardDrop,\n    onUpdateColumn\n  } = props;\n  const cards = mapOrder(column.cards, column.cardOrder, \"id\");\n  const {\n    t\n  } = useTranslation();\n  const [isShowConfirmPopup, setIsShowConfirmPopup] = useState(false);\n  const [columnTitle, setColumnTitle] = useState(\"\");\n  const newCardTextareaRef = useRef(null);\n  const [newCardTitle, setNewCardTitle] = useState(\"\"); // const onCardDrop = (card) => {\n  //   console.log(card);\n  // };\n\n  const [isCreateInputOpen, setIsCreateInputOpen] = useState(false);\n\n  const handleToggleInput = () => {\n    setIsCreateInputOpen(!isCreateInputOpen);\n  };\n\n  const handleOnCreate = () => {\n    if (!newCardTitle) {\n      newCardTextareaRef.current.focus();\n      return;\n    }\n\n    const newCardToAdd = {\n      id: Math.random().toString(36).substr(2, 5),\n      boardId: column.boardId,\n      columnId: column.id,\n      title: newCardTitle.trim(),\n      cover: null\n    }; // let newColumns = [...column];\n    // newColumns.push(newColumnToAdd);\n    // let newBoard = { ...board };\n    // newBoard.columnOrder = newColumns.map((c) => c.id);\n    // newBoard.columns = newColumns;\n    // setBoard(newBoard);\n    // setColumn(newColumns);\n    // setNewColumnTitle(\"\");\n\n    setIsCreateInputOpen(false);\n  };\n\n  const handleShowConfirmation = () => setIsShowConfirmPopup(!isShowConfirmPopup);\n\n  const handleActionConfirmPopup = type => {\n    console.log(type);\n\n    if (type === MODAL_ACTION_CONFIRM) {\n      /**\n       * *something stuff here\n       */\n      const newColumn = { ...column,\n        _destroy: true\n      };\n      onUpdateColumn(newColumn);\n    }\n\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n  };\n\n  const handleColumnTitleChange = e => {\n    setColumnTitle(e.target.value);\n  };\n\n  const handleColumnTitleBlur = e => {\n    const newColumn = { ...column,\n      title: columnTitle\n    };\n    onUpdateColumn(newColumn);\n  };\n\n  const onChangeInput = e => {\n    setNewCardTitle(e.target.value);\n  };\n\n  useEffect(() => {\n    setColumnTitle(column.title);\n  }, [column.title]);\n  useEffect(() => {\n    if (newCardTextareaRef && newCardTextareaRef.current) {\n      newCardTextareaRef.current.focus();\n      newCardTextareaRef.current.select();\n    }\n  }, [isCreateInputOpen]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"column-drag-handle\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          size: \"sm\",\n          type: \"text\",\n          placeholder: \"Enter column title...\",\n          className: \"trello-content-editable\",\n          value: columnTitle,\n          onBlur: handleColumnTitleBlur,\n          spellCheck: \"false\",\n          onClick: selectAllInlineText,\n          onChange: handleColumnTitleChange,\n          onKeyDown: saveContent,\n          onMouseDown: e => e.preventDefault()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-dropdown-actions\",\n          children: /*#__PURE__*/_jsxDEV(Dropdown, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n              id: \"dropdown-basic\",\n              size: \"sm\",\n              className: \"dropdown-btn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n              children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                onClick: handleShowConfirmation,\n                children: t(\"text.removeCard\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                children: t(\"text.moveAll\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                children: t(\"text.more\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-list\",\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          groupName: \"col\" // onDragStart={(e) => console.log(\"drag started\", e)}\n          // onDragEnd={(e) => console.log(\"drag end\", e)}\n          ,\n          onDrop: dropResult => onCardDrop(column.id, dropResult),\n          getChildPayload: index => cards[index],\n          dragClass: \"card-ghost\",\n          dropClass: \"card-ghost-drop\" // onDragEnter={() => {\n          //   console.log(\"drag enter:\", column.id);\n          // }}\n          // onDragLeave={() => {\n          //   console.log(\"drag leave:\", column.id);\n          // }}\n          // onDropReady={(p) => console.log(\"Drop ready: \", p)}\n          ,\n          dropPlaceholder: {\n            animationDuration: 300,\n            showOnTop: true,\n            className: \"column-drop-preview\"\n          },\n          dropPlaceholderAnimationDuration: 200,\n          children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              card: card\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), isCreateInputOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-new-card\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            size: \"sm\",\n            as: \"textarea\",\n            rows: \"3 \",\n            placeholder: t(\"text.enterNewCardTitle\"),\n            className: \"textarea-enter-new-card\",\n            ref: newCardTextareaRef,\n            value: newCardTitle,\n            onChange: onChangeInput,\n            onKeyDown: e => e.key === \"Enter\" && handleOnCreate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            size: \"sm\",\n            onClick: handleOnCreate,\n            children: t(\"text.addNewCard\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cancel-add-new\",\n            onClick: handleToggleInput,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-close icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: !isCreateInputOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-actions\",\n          onClick: handleToggleInput,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-plus icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), t(\"text.addAnotherCard\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), isShowConfirmPopup && /*#__PURE__*/_jsxDEV(ConfirmModal, {\n        show: isShowConfirmPopup,\n        onAction: handleActionConfirmPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Column, \"xwxqAfcISzDit5XSRw4cZGFRWl0=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Column;\nexport default _c2 = /*#__PURE__*/React.memo(Column);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Column\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/davinci/TaskManagementFE/src/components/Column/Column.jsx"],"names":["React","useState","useEffect","useRef","Container","Draggable","useTranslation","Card","mapOrder","Dropdown","Form","Button","ConfirmModal","MODAL_ACTION_CONFIRM","saveContent","selectAllInlineText","Column","props","column","onCardDrop","onUpdateColumn","cards","cardOrder","t","isShowConfirmPopup","setIsShowConfirmPopup","columnTitle","setColumnTitle","newCardTextareaRef","newCardTitle","setNewCardTitle","isCreateInputOpen","setIsCreateInputOpen","handleToggleInput","handleOnCreate","current","focus","newCardToAdd","id","Math","random","toString","substr","boardId","columnId","title","trim","cover","handleShowConfirmation","handleActionConfirmPopup","type","console","log","newColumn","_destroy","handleColumnTitleChange","e","target","value","handleColumnTitleBlur","onChangeInput","select","preventDefault","dropResult","index","animationDuration","showOnTop","className","map","card","key","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport { useTranslation } from \"react-i18next\";\nimport Card from \"components/Card/Card\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport ConfirmModal from \"components/Common/ConfirmModal\";\nimport { MODAL_ACTION_CONFIRM } from \"ultilities/constants\";\nimport { saveContent, selectAllInlineText } from \"ultilities/contentEditable\";\n\nimport \"./Column.scss\";\n\nconst Column = (props) => {\n  const { column, onCardDrop, onUpdateColumn } = props;\n  const cards = mapOrder(column.cards, column.cardOrder, \"id\");\n  const { t } = useTranslation();\n  const [isShowConfirmPopup, setIsShowConfirmPopup] = useState(false);\n  const [columnTitle, setColumnTitle] = useState(\"\");\n  const newCardTextareaRef = useRef(null); \n  const [newCardTitle, setNewCardTitle] = useState(\"\");\n\n\n  // const onCardDrop = (card) => {\n  //   console.log(card);\n  // };\n\n  const [isCreateInputOpen, setIsCreateInputOpen] = useState(false);\n  const handleToggleInput = () => {\n    setIsCreateInputOpen(!isCreateInputOpen);\n  };\n\n  const handleOnCreate = () => {\n    if (!newCardTitle) {\n      newCardTextareaRef.current.focus();\n      return;\n    }\n\n    const newCardToAdd = {\n      id: Math.random().toString(36).substr(2, 5),\n      boardId: column.boardId,\n      columnId: column.id,\n      title: newCardTitle.trim(),\n      cover: null,\n    };\n\n    // let newColumns = [...column];\n    // newColumns.push(newColumnToAdd);\n\n    // let newBoard = { ...board };\n    // newBoard.columnOrder = newColumns.map((c) => c.id);\n    // newBoard.columns = newColumns;\n    // setBoard(newBoard);\n    // setColumn(newColumns);\n    // setNewColumnTitle(\"\");\n    setIsCreateInputOpen(false);\n  };\n\n  const handleShowConfirmation = () =>\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n\n  const handleActionConfirmPopup = (type) => {\n    console.log(type);\n    if (type === MODAL_ACTION_CONFIRM) {\n      /**\n       * *something stuff here\n       */\n      const newColumn = {\n        ...column,\n        _destroy: true,\n      };\n      onUpdateColumn(newColumn);\n    }\n    setIsShowConfirmPopup(!isShowConfirmPopup);\n  };\n\n  const handleColumnTitleChange = (e) => {\n    setColumnTitle(e.target.value);\n  };\n\n  const handleColumnTitleBlur = (e) => {\n    const newColumn = {\n      ...column,\n      title: columnTitle,\n    };\n    onUpdateColumn(newColumn);\n  };\n\n  const onChangeInput = (e) => {\n    setNewCardTitle(e.target.value);\n  };\n\n  useEffect(() => {\n    setColumnTitle(column.title);\n  }, [column.title]);\n\n  useEffect(() => {\n    if (newCardTextareaRef && newCardTextareaRef.current) {\n      newCardTextareaRef.current.focus();\n      newCardTextareaRef.current.select();\n    }\n  }, [isCreateInputOpen]);\n\n  return (\n    <>\n      <div className=\"columns\">\n        <header className=\"column-drag-handle\">\n          <Form.Control\n            size=\"sm\"\n            type=\"text\"\n            placeholder=\"Enter column title...\"\n            className=\"trello-content-editable\"\n            value={columnTitle}\n            onBlur={handleColumnTitleBlur}\n            spellCheck=\"false\"\n            onClick={selectAllInlineText}\n            onChange={handleColumnTitleChange}\n            onKeyDown={saveContent}\n            onMouseDown={(e) => e.preventDefault()}\n          />\n          <div className=\"column-dropdown-actions\">\n            <Dropdown>\n              <Dropdown.Toggle\n                id=\"dropdown-basic\"\n                size=\"sm\"\n                className=\"dropdown-btn\"\n              />\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={handleShowConfirmation}>\n                  {t(\"text.removeCard\")}\n                </Dropdown.Item>\n                <Dropdown.Item>{t(\"text.moveAll\")}</Dropdown.Item>\n                <Dropdown.Item>{t(\"text.more\")}</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        </header>\n        <div className=\"card-list\">\n          <Container\n            groupName=\"col\"\n            // onDragStart={(e) => console.log(\"drag started\", e)}\n            // onDragEnd={(e) => console.log(\"drag end\", e)}\n            onDrop={(dropResult) => onCardDrop(column.id, dropResult)}\n            getChildPayload={(index) => cards[index]}\n            dragClass=\"card-ghost\"\n            dropClass=\"card-ghost-drop\"\n            // onDragEnter={() => {\n            //   console.log(\"drag enter:\", column.id);\n            // }}\n            // onDragLeave={() => {\n            //   console.log(\"drag leave:\", column.id);\n            // }}\n            // onDropReady={(p) => console.log(\"Drop ready: \", p)}\n            dropPlaceholder={{\n              animationDuration: 300,\n              showOnTop: true,\n              className: \"column-drop-preview\",\n            }}\n            dropPlaceholderAnimationDuration={200}\n          >\n            {cards.map((card, index) => (\n              <Draggable key={index}>\n                <Card card={card} />\n              </Draggable>\n            ))}\n          </Container>\n          {isCreateInputOpen && (\n            <div className=\"add-new-card\">\n              <Form.Control\n                size=\"sm\"\n                as=\"textarea\"\n                rows=\"3 \"\n                placeholder={t(\"text.enterNewCardTitle\")}\n                className=\"textarea-enter-new-card\"\n                ref={newCardTextareaRef}\n                value={newCardTitle}\n                onChange={onChangeInput}\n                onKeyDown={(e) => e.key === \"Enter\" && handleOnCreate()}\n              />\n              <Button\n                variant=\"success\"\n                size=\"sm\"\n                onClick={handleOnCreate}\n              >\n                {t(\"text.addNewCard\")}\n              </Button>\n              <span className=\"cancel-add-new\" onClick={handleToggleInput}>\n                <i className=\"fa fa-close icon\"></i>\n              </span>\n            </div>\n          )}\n        </div>\n        <footer>\n          {!isCreateInputOpen && (\n            <div className=\"footer-actions\" onClick={handleToggleInput}>\n              <i className=\"fa fa-plus icon\"></i>\n              {t(\"text.addAnotherCard\")}\n            </div>\n          )}\n        </footer>\n        {isShowConfirmPopup && (\n          <ConfirmModal\n            show={isShowConfirmPopup}\n            onAction={handleActionConfirmPopup}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(Column);\n"]},"metadata":{},"sourceType":"module"}