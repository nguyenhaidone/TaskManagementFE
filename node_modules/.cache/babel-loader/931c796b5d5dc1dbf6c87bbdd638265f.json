{"ast":null,"code":"import _objectSpread from\"/Users/davinci/TaskManagementFE/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/davinci/TaskManagementFE/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/davinci/TaskManagementFE/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import Column from\"components/Column/Column\";import{Container,Draggable}from\"react-smooth-dnd\";import\"./BoardContent.scss\";import{isEmpty}from\"lodash\";import{initialData}from\"actions/initialData\";import{mapOrder}from\"ultilities/ultis\";import{applyDrag}from\"../../ultilities/dnd\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var BoardContent=function BoardContent(){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),column=_useState4[0],setColumn=_useState4[1];useEffect(function(){var getBoardFromDB=initialData.boards.find(function(board){return board.id===\"board-1\";});if(getBoardFromDB){setBoard(getBoardFromDB);setColumn(mapOrder(getBoardFromDB.columns,getBoardFromDB.columnOrder,\"id\"));}},[]);if(isEmpty(board)){return/*#__PURE__*/_jsx(\"div\",{className:\"not-found\",children:\"Board not found\"});}var onColumnDrop=function onColumnDrop(dropResult){console.log(dropResult);var newColumn=_toConsumableArray(column);newColumn=applyDrag(newColumn,dropResult);setColumn(newColumn);console.log(column);console.log(newColumn);var newBoard=_objectSpread({},board);newBoard.columnOrder=newColumn.map(function(c){return c.id;});newBoard.columns=newColumn;setBoard(newBoard);};var onCardDrop=function onCardDrop(columnId,dropResult){//log history when change column\nif(dropResult.removedIndex!==null||dropResult.addedIndex!==null){var newColumn=_toConsumableArray(column);var curColumn=newColumn.find(function(c){return c.id===columnId;});curColumn.cards=applyDrag(curColumn.cards,dropResult);curColumn.cardOrder=curColumn.cards.map(function(i){return i.id;});setColumn(newColumn);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"nav\",{className:\"workspace\",children:/*#__PURE__*/_jsxs(Container,{orientation:\"horizontal\",onDrop:onColumnDrop,dragHandleSelector:\".column-drag-handle\",dropPlaceholder:{animationDuration:150,showOnTop:true,className:\"cards-drop-preview\"},getChildPayload:function getChildPayload(index){return column[index];},children:[column.map(function(column,index){return/*#__PURE__*/_jsx(Draggable,{children:/*#__PURE__*/_jsx(Column,{column:column,onCardDrop:onCardDrop})},index);}),/*#__PURE__*/_jsxs(\"div\",{className:\"add-new-column\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-plus icon\"}),\"Add another column\"]})]})})});};export default/*#__PURE__*/React.memo(BoardContent);","map":{"version":3,"sources":["/Users/davinci/TaskManagementFE/src/components/BoardContent/BoardContent.jsx"],"names":["React","useState","useEffect","Column","Container","Draggable","isEmpty","initialData","mapOrder","applyDrag","BoardContent","board","setBoard","column","setColumn","getBoardFromDB","boards","find","id","columns","columnOrder","onColumnDrop","dropResult","console","log","newColumn","newBoard","map","c","onCardDrop","columnId","removedIndex","addedIndex","curColumn","cards","cardOrder","i","animationDuration","showOnTop","className","index","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Column from \"components/Column/Column\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport \"./BoardContent.scss\";\nimport { isEmpty } from \"lodash\";\nimport { initialData } from \"actions/initialData\";\nimport { mapOrder } from \"ultilities/ultis\";\nimport { applyDrag } from \"../../ultilities/dnd\";\n\nconst BoardContent = () => {\n  const [board, setBoard] = useState({});\n  const [column, setColumn] = useState([]);\n\n  useEffect(() => {\n    const getBoardFromDB = initialData.boards.find(\n      (board) => board.id === \"board-1\"\n    );\n    if (getBoardFromDB) {\n      setBoard(getBoardFromDB);\n\n      setColumn(\n        mapOrder(getBoardFromDB.columns, getBoardFromDB.columnOrder, \"id\")\n      );\n    }\n  }, []);\n\n  if (isEmpty(board)) {\n    return <div className=\"not-found\">Board not found</div>;\n  }\n\n  const onColumnDrop = (dropResult) => {\n    console.log(dropResult);\n    let newColumn = [...column];\n    newColumn = applyDrag(newColumn, dropResult);\n    setColumn(newColumn);\n    console.log(column);\n    console.log(newColumn);\n\n    let newBoard = { ...board };\n    newBoard.columnOrder = newColumn.map((c) => c.id);\n    newBoard.columns = newColumn;\n    setBoard(newBoard);\n  };\n\n  const onCardDrop = (columnId, dropResult) => {\n    //log history when change column\n    if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n      let newColumn = [...column];\n\n      let curColumn = newColumn.find((c) => c.id === columnId);\n\n      curColumn.cards = applyDrag(curColumn.cards, dropResult);\n      curColumn.cardOrder = curColumn.cards.map((i) => i.id);\n\n      setColumn(newColumn);\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"workspace\">\n        <Container\n          orientation=\"horizontal\"\n          onDrop={onColumnDrop}\n          dragHandleSelector=\".column-drag-handle\"\n          dropPlaceholder={{\n            animationDuration: 150,\n            showOnTop: true,\n            className: \"cards-drop-preview\",\n          }}\n          getChildPayload={(index) => column[index]}\n        >\n          {column.map((column, index) => (\n            <Draggable key={index}>\n              <Column column={column} onCardDrop={onCardDrop} />\n            </Draggable>\n          ))}\n          <div className=\"add-new-column\">\n            <i className=\"fa fa-plus icon\"></i>Add another column\n          </div>\n        </Container>\n      </nav>\n    </>\n  );\n};\n\nexport default React.memo(BoardContent);\n"]},"metadata":{},"sourceType":"module"}